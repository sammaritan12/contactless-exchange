"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const menu_component_1 = require("../menu/menu.component");
const popover_component_1 = require("../popover/popover.component");
/**
 * OverflowMenu renders vertical list of menu items in a modal.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets menu visible.
 *
 * @method {() => void} hide - Sets menu invisible.
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {OverflowMenuItemType[]} data - Determines menu items.
 *
 * @property {ReactElement} children - Determines the element "above" which popover will be shown.
 *
 * @property {number} selectedIndex - Determines the index of currently selected item.
 *
 * @property {(index: number, event: GestureResponderEvent) => void} onSelect - Fires when selected item is changed.
 *
 * @property {string | PopoverPlacement} placement - Determines the placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {boolean} fullWidth - Determines whether content element should have same width as child element.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @overview-example OverflowMenuSimpleUsage
 *
 * @overview-example OverflowMenuPlacement
 *
 * @overview-example OverflowMenuWithIcons
 *
 * @overview-example OverflowMenuStyledBackdrop
 *
 * @overview-example OverflowMenuWithDisabledItems
 *
 * @example OverflowMenuWithoutDivider
 *
 * @example OverflowMenuExternalSourceIcons
 */
class OverflowMenuComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.popoverRef = react_1.default.createRef();
        this.show = () => {
            this.popoverRef.current.show();
        };
        this.hide = () => {
            this.popoverRef.current.hide();
        };
        this.getComponentStyle = (source) => {
            const { indicatorBackgroundColor, ...containerParameters } = source;
            return {
                container: containerParameters,
                indicator: {
                    backgroundColor: indicatorBackgroundColor,
                },
            };
        };
        this.renderPopoverContentElement = () => {
            const { themedStyle, indicatorStyle, children, data, style, ...restProps } = this.props;
            return (react_1.default.createElement(menu_component_1.Menu, Object.assign({}, restProps, { style: styles.menu, data: data, initialNumToRender: data.length, showsVerticalScrollIndicator: false, bounces: false })));
        };
    }
    render() {
        const { style, themedStyle, indicatorStyle, children, appearance, ...restProps } = this.props;
        const { container, indicator } = this.getComponentStyle(themedStyle);
        const contentElement = this.renderPopoverContentElement();
        return (react_1.default.createElement(popover_component_1.Popover, Object.assign({}, restProps, { ref: this.popoverRef, style: [container, style], content: contentElement }), children));
    }
}
OverflowMenuComponent.styledComponentName = 'OverflowMenu';
const styles = react_native_1.StyleSheet.create({
    menu: {
        flexGrow: 0,
    },
});
exports.OverflowMenu = theme_1.styled(OverflowMenuComponent);
//# sourceMappingURL=overflowMenu.component.js.map