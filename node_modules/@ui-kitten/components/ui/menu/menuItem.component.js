"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * `MenuItem` is a support component for `Menu`.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {(style: StyleType) => ReactElement} accessory - Determines the accessory of the component.
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines the icon of the component.
 *
 * @property {MenuItemType[]} subItems - Determines the sub-items of the MenuItem.
 *
 * @property {(index: number, event: GestureResponderEvent) => void} onPress - Emits when component is pressed.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 */
class MenuItemComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = services_1.WebEventResponder.create(this);
        this.onMouseEnter = () => {
            this.props.dispatch([theme_1.Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onFocus = () => {
            this.props.dispatch([theme_1.Interaction.FOCUSED]);
        };
        this.onBlur = () => {
            this.props.dispatch([]);
        };
        this.onPress = (event) => {
            if (this.props.onPress) {
                this.props.onPress(this.props.menuIndex, event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(this.props.menuIndex, event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(this.props.menuIndex, event);
            }
        };
        this.onLongPress = (event) => {
            if (this.props.onLongPress) {
                this.props.onLongPress(this.props.menuIndex, event);
            }
        };
        this.getComponentStyles = (style) => {
            const { paddingHorizontal, paddingVertical, backgroundColor } = style;
            const titleStyles = services_1.allWithPrefix(style, 'title');
            const indicatorStyles = services_1.allWithPrefix(style, 'indicator');
            const iconStyles = services_1.allWithPrefix(style, 'icon');
            return {
                container: {
                    paddingHorizontal: paddingHorizontal,
                    paddingVertical: paddingVertical,
                    backgroundColor: backgroundColor,
                },
                title: {
                    marginHorizontal: titleStyles.titleMarginHorizontal,
                    fontFamily: titleStyles.titleFontFamily,
                    fontSize: titleStyles.titleFontSize,
                    fontWeight: titleStyles.titleFontWeight,
                    lineHeight: titleStyles.titleLineHeight,
                    color: titleStyles.titleColor,
                },
                indicator: {
                    width: indicatorStyles.indicatorWidth,
                    backgroundColor: indicatorStyles.indicatorBackgroundColor,
                },
                icon: {
                    width: iconStyles.iconWidth,
                    height: iconStyles.iconHeight,
                    marginHorizontal: iconStyles.iconMarginHorizontal,
                    tintColor: iconStyles.iconTintColor,
                },
            };
        };
        this.renderIcon = (style) => {
            const iconElement = this.props.icon(style);
            return react_1.default.cloneElement(iconElement, {
                style: [style, iconElement.props.style],
            });
        };
        this.renderTitle = (style) => {
            const { title, titleStyle } = this.props;
            return (react_1.default.createElement(text_component_1.Text, { style: [style, titleStyle] }, title));
        };
        this.renderAccessory = (style) => {
            return this.props.accessory(style);
        };
        this.renderComponentChildren = (style) => {
            const { title, icon, accessory } = this.props;
            return [
                icon && this.renderIcon(style.icon),
                title && this.renderTitle(style.title),
                accessory && this.renderAccessory(style.icon),
            ];
        };
    }
    render() {
        const { themedStyle, style, ...restProps } = this.props;
        const { container, indicator, ...restStyles } = this.getComponentStyles(themedStyle);
        const [iconElement, textElement, accessoryElement] = this.renderComponentChildren(restStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, restProps, this.webEventResponder.eventHandlers, { style: [styles.container, container, webStyles.container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut, onLongPress: this.onLongPress }),
            react_1.default.createElement(react_native_1.View, { style: [styles.indicator, indicator] }),
            react_1.default.createElement(react_native_1.View, { style: styles.subContainer },
                iconElement,
                textElement),
            accessoryElement));
    }
}
MenuItemComponent.styledComponentName = 'MenuItem';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    subContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    indicator: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        zIndex: 2,
    },
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.MenuItem = theme_1.styled(MenuItemComponent);
//# sourceMappingURL=menuItem.component.js.map