/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleProp, TextStyle, TouchableOpacityProps } from 'react-native';
import { StyledComponentProps, StyleType } from '../../theme';
import { IconElement } from '../icon/icon.component';
import { TouchableIndexedProps } from '../support/typings';
declare type IconProp = (style: StyleType, index: number) => IconElement;
declare type AccessoryProp = (style: StyleType, index: number) => React.ReactElement;
interface ListDerivedProps {
    index?: number;
}
interface TemplateBaseProps {
    icon?: IconProp;
    accessory?: AccessoryProp;
}
interface TemplateTitleProps extends TemplateBaseProps {
    title: string;
    description?: string;
    titleStyle?: StyleProp<TextStyle>;
}
interface TemplateDescriptionProps extends TemplateBaseProps {
    title?: string;
    description: string;
    descriptionStyle?: StyleProp<TextStyle>;
}
interface CustomContentProps {
    children?: React.ReactNode;
}
declare type ComponentProps = (TemplateTitleProps | TemplateDescriptionProps | CustomContentProps) & ListDerivedProps;
export declare type ListItemProps = StyledComponentProps & TouchableIndexedProps & ComponentProps;
export declare type ListItemElement = React.ReactElement<ListItemProps>;
/**
 * `ListItem` is a support component for `List`.
 * The key feature of wrapping custom list items into `ListItem` component is that it automatically
 * picks background color fitting to current theme and responds to touches with feedback.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {string} description - Determines the description of the ListItem's title.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {StyleProp<TextStyle>} descriptionStyle - Customizes description style.
 *
 * @property {ReactNode} children - Determines React Children of the component.
 *
 * @property {(style: StyleType, index: number) => ReactElement} accessory - Determines the accessory of the
 * component.
 *
 * @property {(style: ImageStyle, index: number) => ReactElement} icon - Determines the icon of the
 * component.
 *
 * @property {(index: number, event: GestureResponderEvent) => ReactElement<ImageProps>} onPress - Emits when
 * component is pressed.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example ListItemSimpleUsage
 *
 * @overview-example ListItemWithIcon
 *
 * @overview-example ListItemWithAccessory
 *
 * @example ListItemWithExternalIcon
 *
 * @example ListItemInlineStyling
 */
export declare class ListItemComponent extends React.Component<ListItemProps> {
    static styledComponentName: string;
    private onPress;
    private onPressIn;
    private onPressOut;
    private onLongPress;
    private getComponentStyle;
    private renderIconElement;
    private renderContentElement;
    private renderTitleElement;
    private renderDescriptionElement;
    private renderAccessoryElement;
    private renderContentElementChildren;
    private renderTemplateChildren;
    private renderComponentChildren;
    render(): React.ReactElement<TouchableOpacityProps>;
}
export declare const ListItem: import("../../theme").StyledComponentClass<ListItemProps>;
export {};
