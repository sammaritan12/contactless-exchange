"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * `ListItem` is a support component for `List`.
 * The key feature of wrapping custom list items into `ListItem` component is that it automatically
 * picks background color fitting to current theme and responds to touches with feedback.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the ListItem.
 *
 * @property {string} description - Determines the description of the ListItem's title.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {StyleProp<TextStyle>} descriptionStyle - Customizes description style.
 *
 * @property {ReactNode} children - Determines React Children of the component.
 *
 * @property {(style: StyleType, index: number) => ReactElement} accessory - Determines the accessory of the
 * component.
 *
 * @property {(style: ImageStyle, index: number) => ReactElement} icon - Determines the icon of the
 * component.
 *
 * @property {(index: number, event: GestureResponderEvent) => ReactElement<ImageProps>} onPress - Emits when
 * component is pressed.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example ListItemSimpleUsage
 *
 * @overview-example ListItemWithIcon
 *
 * @overview-example ListItemWithAccessory
 *
 * @example ListItemWithExternalIcon
 *
 * @example ListItemInlineStyling
 */
class ListItemComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.onPress = (event) => {
            if (this.props.onPress) {
                this.props.onPress(this.props.index, event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(this.props.index, event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(this.props.index, event);
            }
        };
        this.onLongPress = (event) => {
            if (this.props.onLongPress) {
                this.props.onLongPress(this.props.index, event);
            }
        };
        this.getComponentStyle = (source) => {
            const { iconWidth, iconHeight, iconMarginHorizontal, iconTintColor, titleMarginHorizontal, titleFontFamily, titleFontSize, titleLineHeight, titleFontWeight, titleColor, descriptionFontFamily, descriptionFontSize, descriptionFontWeight, descriptionLineHeight, descriptionColor, descriptionMarginHorizontal, accessoryMarginHorizontal, ...containerParameters } = source;
            return {
                container: containerParameters,
                contentContainer: {},
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginHorizontal: iconMarginHorizontal,
                    tintColor: iconTintColor,
                },
                title: {
                    marginHorizontal: titleMarginHorizontal,
                    fontFamily: titleFontFamily,
                    fontSize: titleFontSize,
                    lineHeight: titleLineHeight,
                    fontWeight: titleFontWeight,
                    color: titleColor,
                },
                description: {
                    color: descriptionColor,
                    fontFamily: descriptionFontFamily,
                    fontSize: descriptionFontSize,
                    fontWeight: descriptionFontWeight,
                    lineHeight: descriptionLineHeight,
                    marginHorizontal: descriptionMarginHorizontal,
                },
                accessory: {
                    marginHorizontal: accessoryMarginHorizontal,
                },
            };
        };
        this.renderIconElement = (style) => {
            // @ts-ignore: will be not executed if `icon` prop is provided
            const { index, icon } = this.props;
            const iconElement = icon(style, index);
            return react_1.default.cloneElement(iconElement, {
                key: 0,
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderContentElement = (style) => {
            const { contentContainer, ...contentStyles } = style;
            const [titleElement, descriptionElement] = this.renderContentElementChildren(contentStyles);
            return (react_1.default.createElement(react_native_1.View, { key: 1, style: [contentContainer, styles.contentContainer] },
                titleElement,
                descriptionElement));
        };
        this.renderTitleElement = (style) => {
            // @ts-ignore: will be not executed if `title` property is provided
            const { title, titleStyle } = this.props;
            return (react_1.default.createElement(text_component_1.Text, { key: 2, style: [style, styles.title, titleStyle] }, title));
        };
        this.renderDescriptionElement = (style) => {
            // @ts-ignore: will be not executed if `description` property is provided
            const { description, descriptionStyle } = this.props;
            return (react_1.default.createElement(text_component_1.Text, { key: 3, style: [style, styles.description, descriptionStyle] }, description));
        };
        this.renderAccessoryElement = (style) => {
            // @ts-ignore: will be not executed if `accessory` property is provided
            const { index, accessory } = this.props;
            const accessoryElement = accessory(style, index);
            return react_1.default.cloneElement(accessoryElement, {
                key: 4,
                style: [style, styles.accessory, accessoryElement.props.style],
            });
        };
        this.renderContentElementChildren = (style) => {
            // @ts-ignore: will be not executed if any of properties below is provided
            const { title, description } = this.props;
            return [
                services_1.isValidString(title) && this.renderTitleElement(style.title),
                services_1.isValidString(description) && this.renderDescriptionElement(style.description),
            ];
        };
        this.renderTemplateChildren = (style) => {
            // @ts-ignore: following props could not be provided
            const { icon, title, description, accessory } = this.props;
            return [
                icon && this.renderIconElement(style.icon),
                (title || description) && this.renderContentElement(style),
                accessory && this.renderAccessoryElement(style.accessory),
            ];
        };
        this.renderComponentChildren = (style) => {
            const { children } = this.props;
            return children ? children : this.renderTemplateChildren(style);
        };
    }
    render() {
        const { themedStyle, style, ...derivedProps } = this.props;
        const { container, ...componentStyles } = this.getComponentStyle(themedStyle);
        const componentChildren = this.renderComponentChildren(componentStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, derivedProps, { style: [container, styles.container, webStyles.container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut, onLongPress: this.onLongPress }), componentChildren));
    }
}
exports.ListItemComponent = ListItemComponent;
ListItemComponent.styledComponentName = 'ListItem';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    contentContainer: {
        flex: 1,
    },
    icon: {},
    title: {
        textAlign: 'left',
    },
    description: {
        textAlign: 'left',
    },
    accessory: {},
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.ListItem = theme_1.styled(ListItemComponent);
//# sourceMappingURL=listItem.component.js.map