"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const theme_1 = require("../../theme");
const baseDatepicker_component_1 = require("./baseDatepicker.component");
const calendar_component_1 = require("../calendar/calendar.component");
/**
 * Styled `Datepicker` component.
 * Renders `Calendar` component in the `Popover`.
 * Supports locales and different date objects like Moment.js or date-fns.
 * Composes date picker components in a horizontal pageable list.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets picker visible.
 *
 * @method {() => void} hide - Sets picker invisible.
 *
 * @method {() => void} focus - Focuses Datepicker and sets it visible.
 *
 * @method {() => void} blur - Removes focus from Datepicker and sets it invisible. This is the opposite of `focus()`.
 *
 * @method {() => boolean} isFocused - Returns true if the Datepicker is currently focused and visible.
 *
 * @method {() => void} clear - Removes all text from the Datepicker.
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines the icon of the component.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `small`, `medium` or `large`.
 * Default is `medium`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false.
 *
 * @property {string} placeholder - Determines placeholder of the component.
 *
 * @property {string} label - Determines text rendered at the top of the component.
 *
 * @property {string} caption - Determines caption text rendered at the bottom of the component.
 *
 * @property {(style: StyleType) => ReactElement} icon - Determines icon of the component.
 *
 * @property {(style: StyleType) => ReactElement} captionIcon - Determines caption icon.
 *
 * @property {StyleProp<TextStyle>} labelStyle - Customizes label style.
 *
 * @property {StyleProp<TextStyle>} captionStyle - Customizes caption style.
 *
 * @property {D} min - Minimal date that is able to be selected.
 *
 * @property {D} max - Maximum date that is able to be selected.
 *
 * @property {D} date - Date which is currently selected.
 *
 * @property {DateService<D>} dateService - Date service that is able to work with a date objects.
 * Defaults to Native Date service that works with JS Date.
 * Allows using different types of date like Moment.js or date-fns.
 *
 * @property {boolean} boundingMonth - Defines if we should render previous and next months in the current month view.
 *
 * @property {CalendarViewMode} startView - Defines starting view for calendar. Defaults to Date view.
 *
 * @property {(date: D) => string} title - Defines the title for visible date.
 *
 * @property {(date: D) => boolean} filter - Predicate that decides which cells will be disabled.
 *
 * @property {(date: D) => void} onSelect - Fires when day cell is pressed.
 *
 * @property {() => void} onFocus - Fires when picker becomes visible.
 *
 * @property {() => void} onBlur - Fires when picker becomes invisible.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderDay - Should return the content of day cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderMonth - Should return the content of month cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderYear - Should return the content of year cell.
 *
 * @property {() => ReactElement} renderFooter - Should return the footer.
 *
 * @property {string | PopoverPlacement} placement - Determines the actual placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example DatepickerSimpleUsage
 *
 * @overview-example DatepickerWithIcon
 *
 * @overview-example DatepickerBoundingMonth
 *
 * @overview-example DatepickerFilter
 *
 * @overview-example DatepickerStatus
 *
 * @overview-example DatepickerSize
 *
 * @example DatepickerCustomDay
 *
 * @example DatepickerCustomLocale
 *
 * @example DatepickerDateFormat
 *
 * @example DatepickerMoment
 */
class DatepickerComponent extends baseDatepicker_component_1.BaseDatepickerComponent {
    constructor(props) {
        super(props);
        this.clear = () => {
            if (this.props.onSelect) {
                this.props.onSelect(null);
            }
        };
        this.clear = this.clear.bind(this);
    }
    get calendarProps() {
        return {
            min: this.props.min,
            max: this.props.max,
            date: this.props.date,
            dateService: this.props.dateService,
            boundingMonth: this.props.boundingMonth,
            startView: this.props.startView,
            filter: this.props.filter,
            title: this.props.title,
            onSelect: this.props.onSelect,
            renderDay: this.props.renderDay,
            renderYear: this.props.renderYear,
            renderFooter: this.props.renderFooter,
        };
    }
    // BaseDatepickerComponent
    getComponentTitle() {
        if (this.props.date) {
            return this.props.dateService.format(this.props.date, null);
        }
        else {
            return this.props.placeholder;
        }
    }
    renderCalendar() {
        return (
        // @ts-ignore
        react_1.default.createElement(calendar_component_1.Calendar, Object.assign({}, this.calendarProps)));
    }
}
exports.DatepickerComponent = DatepickerComponent;
DatepickerComponent.styledComponentName = 'Datepicker';
exports.Datepicker = theme_1.styled(DatepickerComponent);
//# sourceMappingURL=datepicker.component.js.map