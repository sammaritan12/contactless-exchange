/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ImageStyle, StyleProp, TextStyle, TouchableOpacityProps } from 'react-native';
import { StyledComponentProps } from '../../theme';
import { IconElement } from '../icon/icon.component';
import { WebEventResponderCallbacks } from '../support/services';
declare type IconProp = (style: ImageStyle) => IconElement;
export interface ButtonProps extends StyledComponentProps, TouchableOpacityProps {
    textStyle?: StyleProp<TextStyle>;
    icon?: IconProp;
    status?: string;
    size?: string;
    children?: string;
}
export declare type ButtonElement = React.ReactElement<ButtonProps>;
/**
 * Styled `Button` component.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled`, `outline` or `ghost`.
 * Default is `filled`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `tiny`, `small`, `medium`, `large`, or `giant`.
 * Default is `medium`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} children - Determines text of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines icon of the component.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example ButtonSimpleUsage
 *
 * @overview-example ButtonStates
 *
 * @overview-example ButtonAppearances
 *
 * @overview-example ButtonStatus
 *
 * @overview-example ButtonSize
 *
 * @overview-example ButtonOutline
 *
 * @overview-example ButtonGhost
 *
 * @overview-example ButtonWithIcon
 */
export declare class ButtonComponent extends React.Component<ButtonProps> implements WebEventResponderCallbacks {
    static styledComponentName: string;
    private webEventResponder;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onFocus: () => void;
    onBlur: () => void;
    private onPress;
    private onPressIn;
    private onPressOut;
    private getComponentStyle;
    private renderTextElement;
    private renderIconElement;
    private renderComponentChildren;
    render(): React.ReactElement<TouchableOpacityProps>;
}
export declare const Button: import("../../theme").StyledComponentClass<ButtonProps>;
export {};
