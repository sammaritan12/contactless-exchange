"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * Styled `Button` component.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled`, `outline` or `ghost`.
 * Default is `filled`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `tiny`, `small`, `medium`, `large`, or `giant`.
 * Default is `medium`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} children - Determines text of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines icon of the component.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example ButtonSimpleUsage
 *
 * @overview-example ButtonStates
 *
 * @overview-example ButtonAppearances
 *
 * @overview-example ButtonStatus
 *
 * @overview-example ButtonSize
 *
 * @overview-example ButtonOutline
 *
 * @overview-example ButtonGhost
 *
 * @overview-example ButtonWithIcon
 */
class ButtonComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = services_1.WebEventResponder.create(this);
        // WebEventResponderCallbacks
        this.onMouseEnter = () => {
            this.props.dispatch([theme_1.Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onFocus = () => {
            this.props.dispatch([theme_1.Interaction.FOCUSED]);
        };
        this.onBlur = () => {
            this.props.dispatch([]);
        };
        this.onPress = (event) => {
            if (this.props.onPress) {
                this.props.onPress(event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.getComponentStyle = (source) => {
            const { textColor, textFontFamily, textFontSize, textLineHeight, textFontWeight, textMarginHorizontal, iconWidth, iconHeight, iconTintColor, iconMarginHorizontal, ...containerParameters } = source;
            return {
                container: containerParameters,
                text: {
                    color: textColor,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    marginHorizontal: textMarginHorizontal,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    tintColor: iconTintColor,
                    marginHorizontal: iconMarginHorizontal,
                },
            };
        };
        this.renderTextElement = (style) => {
            return (react_1.default.createElement(text_component_1.Text, { key: 1, style: [style, styles.text, this.props.textStyle] }, this.props.children));
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return react_1.default.cloneElement(iconElement, {
                key: 2,
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderComponentChildren = (style) => {
            const { icon, children } = this.props;
            return [
                icon && this.renderIconElement(style.icon),
                services_1.isValidString(children) && this.renderTextElement(style.text),
            ];
        };
    }
    render() {
        const { themedStyle, style, ...containerProps } = this.props;
        const { container, ...childStyles } = this.getComponentStyle(themedStyle);
        const [iconElement, textElement] = this.renderComponentChildren(childStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, containerProps, this.webEventResponder.eventHandlers, { style: [container, styles.container, webStyles.container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }),
            iconElement,
            textElement));
    }
}
exports.ButtonComponent = ButtonComponent;
ButtonComponent.styledComponentName = 'Button';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
    },
    text: {},
    icon: {},
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.Button = theme_1.styled(ButtonComponent);
//# sourceMappingURL=button.component.js.map