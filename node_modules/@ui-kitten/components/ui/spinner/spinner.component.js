"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const animation_1 = require("./animation");
const type_1 = require("../measure/type");
/**
 * Styled `Spinner` component. Designed to be used as `ActivityIndicator` component
 *
 * @extends React.Component
 *
 * @property {boolean} animating - Determines whether component is animating. Default is `true`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `primary`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `tiny`, `small`, `medium`, `large`, or `giant`.
 * Default is `medium`.
 *
 * @overview-example SpinnerSimpleUsage
 *
 * @overview-example SpinnerSizes
 *
 * @overview-example SpinnerStatuses
 *
 * @example SpinnerDataLoading
 */
class SpinnerComponent extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.animation = new animation_1.SpinnerAnimation(this.containerSize.height);
        this.startAnimation = () => {
            this.animation.start();
        };
        this.stopAnimation = () => {
            this.animation.stop();
        };
        this.getComponentStyle = (source) => {
            const start = {
                container: source.container,
                arc: source.start,
            };
            const end = {
                container: source.container,
                arc: source.end,
                overflow: { top: this.containerSize.height / 2 },
            };
            return { start, end };
        };
        this.renderArcElement = (style, size) => {
            const arcSize = new type_1.Size(size.width, size.height / 2);
            return (react_1.default.createElement(react_native_1.Animated.View, { style: [style.container, styles.absolute, size] },
                react_1.default.createElement(react_native_1.View, { style: [styles.noOverflow, style.overflow, arcSize] },
                    react_1.default.createElement(react_native_1.Animated.View, { style: [style.arc, size] },
                        react_1.default.createElement(react_native_1.View, { style: [styles.noOverflow, arcSize] },
                            react_1.default.createElement(react_native_1.View, { style: [this.props.themedStyle, this.props.style] }))))));
        };
    }
    get containerSize() {
        const { width, height } = react_native_1.StyleSheet.flatten([this.props.themedStyle, this.props.style]);
        // @ts-ignore: width and height are restricted to be a number
        return new type_1.Size(width, height);
    }
    componentDidMount() {
        if (this.props.animating) {
            this.startAnimation();
        }
    }
    componentDidUpdate(prevProps) {
        const animatingChanged = this.props.animating !== prevProps.animating;
        if (animatingChanged && this.props.animating) {
            this.startAnimation();
        }
        if (animatingChanged && !this.props.animating) {
            this.stopAnimation();
        }
    }
    componentWillUnmount() {
        this.animation.release();
    }
    render() {
        const containerSize = this.containerSize;
        const { start, end } = this.getComponentStyle(this.animation.toProps());
        return (react_1.default.createElement(react_native_1.View, { style: containerSize },
            this.renderArcElement(start, containerSize),
            this.renderArcElement(end, containerSize)));
    }
}
exports.SpinnerComponent = SpinnerComponent;
SpinnerComponent.styledComponentName = 'Spinner';
SpinnerComponent.defaultProps = {
    animating: true,
};
const styles = react_native_1.StyleSheet.create({
    absolute: react_native_1.StyleSheet.absoluteFillObject,
    noOverflow: {
        overflow: 'hidden',
    },
});
exports.Spinner = theme_1.styled(SpinnerComponent);
//# sourceMappingURL=spinner.component.js.map