"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const checkbox_component_1 = require("../checkbox/checkbox.component");
const services_1 = require("../support/services");
class SelectOptionComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = services_1.WebEventResponder.create(this);
        // WebEventResponderCallbacks
        this.onMouseEnter = () => {
            this.props.dispatch([theme_1.Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onPress = (event) => {
            if (this.props.onSelect) {
                this.props.onSelect(this.props.item);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
        };
        this.onMultiSelectItemPress = (value) => {
            this.onPress(null);
        };
        this.getComponentStyle = (source) => {
            const { textColor, textFontFamily, textFontSize, textFontWeight, textLineHeight, textMarginHorizontal, ...containerParameters } = source;
            return {
                container: containerParameters,
                text: {
                    color: textColor,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    fontWeight: textFontWeight,
                    lineHeight: textLineHeight,
                    marginHorizontal: textMarginHorizontal,
                },
            };
        };
        this.renderTextElement = (style) => {
            return (react_1.default.createElement(text_component_1.Text, { style: [style, styles.text, this.props.item.textStyle] }, this.props.item.text));
        };
        this.renderSingleElement = () => {
            const { themedStyle, style, item, ...restProps } = this.props;
            const { container, text } = this.getComponentStyle(themedStyle);
            const textElement = this.renderTextElement(text);
            return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, restProps, this.webEventResponder.eventHandlers, { style: [styles.container, container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }), textElement));
        };
        this.renderMultiSelectElement = () => {
            const { style, themedStyle, selected, disabled, indeterminate, item, ...restProps } = this.props;
            const { container, text } = this.getComponentStyle(themedStyle);
            return (react_1.default.createElement(react_native_1.View, Object.assign({}, restProps, this.webEventResponder.eventHandlers, { style: [styles.container, container, webStyles.container, style] }),
                react_1.default.createElement(checkbox_component_1.CheckBox, { text: item.text, textStyle: [text, item.textStyle, styles.multiSelectText], disabled: disabled, checked: selected, indeterminate: indeterminate, onChange: this.onMultiSelectItemPress })));
        };
    }
    render() {
        return this.props.multi ? this.renderMultiSelectElement() : this.renderSingleElement();
    }
}
SelectOptionComponent.styledComponentName = 'SelectOption';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    icon: {},
    text: {},
    multiSelectText: {
        width: '100%',
    },
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.SelectOption = theme_1.styled(SelectOptionComponent);
//# sourceMappingURL=selectOption.component.js.map