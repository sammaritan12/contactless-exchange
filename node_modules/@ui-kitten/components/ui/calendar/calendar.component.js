"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const theme_1 = require("../../theme");
const baseCalendar_component_1 = require("./baseCalendar.component");
/**
 * Styled `Calendar` component.
 * Supports locales and different date objects like Moment.js or date-fns.
 * Composes date picker components in a horizontal pageable list.
 *
 * @extends React.Component
 *
 * @property {D} min - Minimal date that is able to be selected.
 *
 * @property {D} max - Maximum date that is able to be selected.
 *
 * @property {D} date - Date which is currently selected.
 *
 * @property {DateService<D>} dateService - Date service that is able to work with a date objects.
 * Defaults to Native Date service that works with JS Date.
 * Allows using different types of date like Moment.js or date-fns.
 *
 * @property {boolean} boundingMonth - Defines if we should render previous and next months in the current month view.
 *
 * @property {CalendarViewMode} startView - Defines starting view for calendar. Defaults to Date view.
 *
 * @property {(date: D) => string} title - Defines the title for visible date.
 *
 * @property {(date: D) => boolean} filter - Predicate that decides which cells will be disabled.
 *
 * @property {(date: D) => void} onSelect - Selection emitter. Fires when another day cell is pressed.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderDay - Should return the content of day cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderMonth - Should return the content of month cell.
 *
 * @property {(date: D, style: StyleType) => ReactElement} renderYear - Should return the content of year cell.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example CalendarSimpleUsage
 *
 * @overview-example CalendarBoundingMonth
 *
 * @overview-example CalendarFilter
 *
 * @overview-example CalendarBounds
 *
 * @overview-example CalendarStartDayOfWeek
 *
 * @overview-example CalendarCustomLocale
 *
 * @example CalendarMoment
 *
 * @example CalendarCustomDay
 */
class CalendarComponent extends baseCalendar_component_1.BaseCalendarComponent {
    constructor(props) {
        super(props);
        this.createDates = this.createDates.bind(this);
        this.selectedDate = this.selectedDate.bind(this);
        this.onDateSelect = this.onDateSelect.bind(this);
        this.isDateSelected = this.isDateSelected.bind(this);
        this.shouldUpdateDate = this.shouldUpdateDate.bind(this);
    }
    // BaseCalendarComponent
    createDates(date) {
        return this.dataService.createDayPickerData(date);
    }
    selectedDate() {
        return this.props.date || this.dateService.today();
    }
    onDateSelect(date) {
        if (this.props.onSelect) {
            this.props.onSelect(date);
        }
    }
    isDateSelected(date) {
        return this.dateService.isSameDaySafe(date, this.selectedDate());
    }
    shouldUpdateDate(props, nextProps) {
        const dateChanged = this.dateService.compareDatesSafe(props.date.date, nextProps.date.date) !== 0;
        if (dateChanged) {
            return true;
        }
        const selectionChanged = props.selected !== nextProps.selected;
        const disablingChanged = props.disabled !== nextProps.disabled;
        const value = selectionChanged || disablingChanged;
        if (value) {
            return true;
        }
        return props.theme !== nextProps.theme;
    }
}
exports.CalendarComponent = CalendarComponent;
CalendarComponent.styledComponentName = 'Calendar';
exports.Calendar = theme_1.styled(CalendarComponent);
//# sourceMappingURL=calendar.component.js.map