"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const button_component_1 = require("../../button/button.component");
const chevronDown_component_1 = require("../../support/components/chevronDown.component");
const chevronLeft_component_1 = require("../../support/components/chevronLeft.component");
const chevronRight_component_1 = require("../../support/components/chevronRight.component");
const services_1 = require("../../support/services");
class CalendarHeader extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.renderTitleIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            return (react_1.default.createElement(chevronDown_component_1.ChevronDown, Object.assign({ style: styles.headerButtonIcon, fill: tintColor }, svgProps)));
        };
        this.renderLeftIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            const IconComponent = services_1.I18nLayoutService.select(chevronLeft_component_1.ChevronLeft, chevronRight_component_1.ChevronRight);
            return (react_1.default.createElement(IconComponent, Object.assign({ style: styles.lateralIcon, fill: tintColor }, svgProps)));
        };
        this.renderRightIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            const IconComponent = services_1.I18nLayoutService.select(chevronRight_component_1.ChevronRight, chevronLeft_component_1.ChevronLeft);
            return (react_1.default.createElement(IconComponent, Object.assign({ style: styles.lateralIcon, fill: tintColor }, svgProps)));
        };
        this.renderLateralNavigationControls = () => {
            return (react_1.default.createElement(react_native_1.View, { style: styles.subContainer },
                react_1.default.createElement(button_component_1.Button, { style: styles.headerButton, appearance: 'ghost', 
                    // @ts-ignore
                    icon: this.renderLeftIcon, onPress: this.props.onNavigationLeftPress }),
                react_1.default.createElement(button_component_1.Button, { style: styles.headerButton, appearance: 'ghost', 
                    // @ts-ignore
                    icon: this.renderRightIcon, onPress: this.props.onNavigationRightPress })));
        };
    }
    render() {
        const { style, titleStyle, onTitlePress, title, lateralNavigationAllowed, ...restProps } = this.props;
        return (react_1.default.createElement(react_native_1.View, Object.assign({ style: [styles.container, style] }, restProps),
            react_1.default.createElement(button_component_1.Button, { style: styles.headerButton, appearance: 'ghost', textStyle: [titleStyle, styles.headerButtonText], 
                // @ts-ignore
                icon: this.renderTitleIcon, onPress: onTitlePress }, title),
            lateralNavigationAllowed && this.renderLateralNavigationControls()));
    }
}
exports.CalendarHeader = CalendarHeader;
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    headerButton: {
        flexDirection: 'row-reverse',
    },
    headerButtonText: {
        marginHorizontal: 0,
    },
    headerButtonIcon: {
        marginHorizontal: 0,
    },
    lateralIcon: {
        marginHorizontal: 0,
    },
    subContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
    },
});
//# sourceMappingURL=calendarHeader.component.js.map