"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const measure_component_1 = require("../measure/measure.component");
const type_1 = require("../measure/type");
const POINT_OUTSCREEN = new type_1.Point(-999, -999);
/**
 * `Modal` component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets modal visible.
 *
 * @method {() => void} hide - Sets modal invisible.
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {ReactElement | ReactElement[]} children - Determines component's children.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example ModalSimpleUsage
 *
 * @overview-example ModalWithBackdrop
 */
class Modal extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            contentFrame: type_1.Frame.zero(),
            forceMeasure: false,
        };
        this.contentPosition = POINT_OUTSCREEN;
        this.show = () => {
            this.modalId = theme_1.ModalService.show(this.renderMeasuringContentElement(), this.backdropConfig);
        };
        this.hide = () => {
            this.modalId = theme_1.ModalService.hide(this.modalId);
        };
        this.onContentMeasure = (contentFrame) => {
            this.state.contentFrame = contentFrame;
            const displayFrame = this.state.contentFrame.centerOf(type_1.Frame.window());
            this.contentPosition = displayFrame.origin;
            theme_1.ModalService.update(this.modalId, this.renderContentElement());
        };
        this.renderContentElement = () => {
            return (react_1.default.createElement(react_native_1.View, Object.assign({}, this.props, { style: [this.props.style, styles.modalView, this.contentFlexPosition] })));
        };
        this.renderMeasuringContentElement = () => {
            return (react_1.default.createElement(measure_component_1.MeasureElement, { onMeasure: this.onContentMeasure }, this.renderContentElement()));
        };
    }
    get contentFlexPosition() {
        const derivedStyle = react_native_1.StyleSheet.flatten(this.props.style || {});
        const { x: centerX, y: centerY } = this.contentPosition;
        // @ts-ignore
        return { left: derivedStyle.left || centerX, top: derivedStyle.top || centerY };
    }
    get backdropConfig() {
        const { onBackdropPress, backdropStyle } = this.props;
        return { onBackdropPress, backdropStyle };
    }
    componentDidMount() {
        if (!this.modalId && this.props.visible) {
            this.show();
            return;
        }
    }
    componentDidUpdate(prevProps) {
        if (!this.modalId && this.props.visible && !this.state.forceMeasure) {
            this.setState({ forceMeasure: true });
            return;
        }
        if (!this.modalId && this.props.visible) {
            this.show();
            return;
        }
        if (this.modalId && !this.props.visible) {
            this.hide();
        }
    }
    componentWillUnmount() {
        this.hide();
    }
    render() {
        if (this.modalId && this.props.visible) {
            theme_1.ModalService.update(this.modalId, this.renderContentElement());
        }
        return null;
    }
}
exports.Modal = Modal;
const styles = react_native_1.StyleSheet.create({
    modalView: {
        position: 'absolute',
    },
});
//# sourceMappingURL=modal.component.js.map