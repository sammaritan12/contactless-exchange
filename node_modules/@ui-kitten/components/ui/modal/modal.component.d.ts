/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ViewProps } from 'react-native';
import { ModalPresentingConfig } from '../../theme';
import { Frame } from '../measure/type';
export interface ModalProps extends ViewProps, ModalPresentingConfig {
    visible: boolean;
    children: React.ReactNode;
}
export declare type ModalElement = React.ReactElement<ModalProps>;
interface State {
    contentFrame: Frame;
    forceMeasure: boolean;
}
/**
 * `Modal` component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets modal visible.
 *
 * @method {() => void} hide - Sets modal invisible.
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {ReactElement | ReactElement[]} children - Determines component's children.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example ModalSimpleUsage
 *
 * @overview-example ModalWithBackdrop
 */
export declare class Modal extends React.PureComponent<ModalProps, State> {
    state: State;
    private modalId;
    private contentPosition;
    private get contentFlexPosition();
    private get backdropConfig();
    show: () => void;
    hide: () => void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ModalProps): void;
    componentWillUnmount(): void;
    private onContentMeasure;
    private renderContentElement;
    private renderMeasuringContentElement;
    render(): React.ReactNode;
}
export {};
