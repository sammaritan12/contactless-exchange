import React from 'react';
import { Animated, ViewProps } from 'react-native';
import { IconAnimationRegistry } from './iconAnimation';
import { AnimationConfig } from '../animation';
declare type WrappedElementProps = any;
export declare type IconProps<T = WrappedElementProps> = T & {
    name: string;
    pack?: string;
    animation?: keyof IconAnimationRegistry;
    animationConfig?: AnimationConfig;
};
export declare type IconElement<T = WrappedElementProps> = React.ReactElement<IconProps<T>>;
/**
 * `Icon` component with animation support. Allows to render any ReactElement registered for a specific name.
 * Starting from UI Kitten 4.2, there is `@ui-kitten/eva-icons` module
 * that renders any icon from eva-icons package in `svg` format.
 * It allows easily use icons in any component that has `icon` prop
 *
 * @extends React.Component
 *
 * @method {(callback?: Animated.EndCallback) => void} startAnimation - Toggle animation to start.
 *
 * @method {() => void} stopAnimation - Toggle animation to stop.
 *
 * @property {string} name - Name of registered icon.
 *
 * @property {string} pack - Name of icon pack that is able to provide an icon for specified name.
 *
 * @property {string} animation - Animation name. Available `zoom`, `pulse` and `shake`. Default is `zoom`.
 *
 * @property {AnimationConfig} animationConfig - Determines animation config. Extends `Animated.AnimationConfig`.
 *
 * @overview-example IconSimpleUsage
 *
 * @overview-example IconWithinButton
 *
 * @overview-example IconWithinInput
 *
 * @overview-example IconExternalSource
 *
 * @overview-example IconAnimation
 *
 * @example IconAnimationInfinite
 *
 * @example IconInlineStyling
 */
export declare class Icon<T> extends React.Component<IconProps<T>> {
    static defaultProps: Partial<IconProps>;
    private readonly animation;
    constructor(props: IconProps<T>);
    componentWillUnmount(): void;
    startAnimation: (callback?: Animated.EndCallback) => void;
    stopAnimation: () => void;
    private getComponentStyle;
    render(): React.ReactElement<ViewProps>;
}
export {};
