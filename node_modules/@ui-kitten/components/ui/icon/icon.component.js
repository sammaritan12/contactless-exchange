"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const iconAnimation_1 = require("./iconAnimation");
const iconRegistry_service_1 = require("./service/iconRegistry.service");
/**
 * `Icon` component with animation support. Allows to render any ReactElement registered for a specific name.
 * Starting from UI Kitten 4.2, there is `@ui-kitten/eva-icons` module
 * that renders any icon from eva-icons package in `svg` format.
 * It allows easily use icons in any component that has `icon` prop
 *
 * @extends React.Component
 *
 * @method {(callback?: Animated.EndCallback) => void} startAnimation - Toggle animation to start.
 *
 * @method {() => void} stopAnimation - Toggle animation to stop.
 *
 * @property {string} name - Name of registered icon.
 *
 * @property {string} pack - Name of icon pack that is able to provide an icon for specified name.
 *
 * @property {string} animation - Animation name. Available `zoom`, `pulse` and `shake`. Default is `zoom`.
 *
 * @property {AnimationConfig} animationConfig - Determines animation config. Extends `Animated.AnimationConfig`.
 *
 * @overview-example IconSimpleUsage
 *
 * @overview-example IconWithinButton
 *
 * @overview-example IconWithinInput
 *
 * @overview-example IconExternalSource
 *
 * @overview-example IconAnimation
 *
 * @example IconAnimationInfinite
 *
 * @example IconInlineStyling
 */
class Icon extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.startAnimation = (callback) => {
            this.animation.start(callback);
        };
        this.stopAnimation = () => {
            this.animation.stop();
        };
        this.getComponentStyle = () => {
            return this.animation.toProps();
        };
        this.animation = iconAnimation_1.getIconAnimation(props.animation, props.animationConfig);
    }
    componentWillUnmount() {
        this.animation.release();
    }
    render() {
        const { name, pack, ...restProps } = this.props;
        const registeredIcon = iconRegistry_service_1.IconRegistryService.getIcon(name, pack);
        return (react_1.default.createElement(react_native_1.Animated.View, Object.assign({}, this.getComponentStyle()), registeredIcon.icon.toReactElement(restProps)));
    }
}
exports.Icon = Icon;
Icon.defaultProps = {
    animation: 'zoom',
};
//# sourceMappingURL=icon.component.js.map