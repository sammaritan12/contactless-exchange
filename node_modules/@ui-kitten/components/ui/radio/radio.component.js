"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * Styled `Radio` component.
 *
 * @extends React.Component
 *
 * @property {boolean} checked - Determines whether component is checked.
 * Default is `false`.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {string} text - Determines text of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(selected: boolean) => void} onChange - Triggered on onChange value.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example RadioSimpleUsage
 *
 * @overview-example RadioStates
 *
 * @overview-example RadioStatus
 *
 * @example RadioInlineStyling
 */
class RadioComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = services_1.WebEventResponder.create(this);
        this.onMouseEnter = () => {
            this.props.dispatch([theme_1.Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onFocus = () => {
            this.props.dispatch([theme_1.Interaction.FOCUSED]);
        };
        this.onBlur = () => {
            this.props.dispatch([]);
        };
        this.onPress = () => {
            if (this.props.onChange) {
                this.props.onChange(!this.props.checked);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.getComponentStyle = (source) => {
            const { textMarginHorizontal, textFontFamily, textFontSize, textFontWeight, textLineHeight, textColor, iconWidth, iconHeight, iconBorderRadius, iconTintColor, outlineWidth, outlineHeight, outlineBorderRadius, outlineBackgroundColor, ...containerParameters } = source;
            return {
                container: {},
                highlightContainer: {},
                selectContainer: containerParameters,
                text: {
                    marginHorizontal: textMarginHorizontal,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    color: textColor,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    borderRadius: iconBorderRadius,
                    backgroundColor: iconTintColor,
                },
                highlight: {
                    width: outlineWidth,
                    height: outlineHeight,
                    borderRadius: outlineBorderRadius,
                    backgroundColor: outlineBackgroundColor,
                },
            };
        };
        this.createHitSlopInsets = (style) => {
            const flatStyle = react_native_1.StyleSheet.flatten(style);
            // @ts-ignore `width` is restricted to be a number
            const value = 40 - flatStyle.width;
            return {
                left: value,
                top: value,
                right: value,
                bottom: value,
            };
        };
        this.renderTextElement = (style) => {
            const { text, textStyle } = this.props;
            return (react_1.default.createElement(text_component_1.Text, { key: 0, style: [style, styles.text, textStyle] }, text));
        };
        this.renderComponentChildren = (style) => {
            const { text } = this.props;
            return [
                services_1.isValidString(text) && this.renderTextElement(style.text),
            ];
        };
    }
    render() {
        const { style, themedStyle, disabled, ...derivedProps } = this.props;
        const { container, highlightContainer, selectContainer, icon, highlight, ...componentStyles } = this.getComponentStyle(themedStyle);
        const selectContainerStyle = [selectContainer, styles.selectContainer];
        const hitSlopInsets = this.createHitSlopInsets(selectContainerStyle);
        const [textElement] = this.renderComponentChildren(componentStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, derivedProps, this.webEventResponder.eventHandlers, { style: [container, styles.container, webStyles.container, style], disabled: disabled, hitSlop: hitSlopInsets, onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }),
            react_1.default.createElement(react_native_1.View, { style: [highlightContainer, styles.highlightContainer] },
                react_1.default.createElement(react_native_1.View, { style: [highlight, styles.highlight] }),
                react_1.default.createElement(react_native_1.View, { style: selectContainerStyle },
                    react_1.default.createElement(react_native_1.View, { style: [icon, styles.icon] }))),
            textElement));
    }
}
exports.RadioComponent = RadioComponent;
RadioComponent.styledComponentName = 'Radio';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    highlightContainer: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    selectContainer: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    icon: {},
    highlight: {
        position: 'absolute',
    },
    text: {},
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.Radio = theme_1.styled(RadioComponent);
//# sourceMappingURL=radio.component.js.map