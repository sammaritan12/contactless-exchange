"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
/**
 * Styled `Text` component.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default`, `alternative`, `hint`.
 * Default is `default`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 *
 * @property {string} category - Determines the category of the component.
 * Can be `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `s1`, `s2`, `p1`, `p2`, `c1`, `c2`, `label`.
 * Default is `p1`.
 *
 * @property {string | ReactElement<TextProps>} children - Determines text of the component.
 *
 * @property {TextProps} ...TextProps - Any props applied to Text component.
 *
 * @overview-example TextSimpleUsage
 *
 * @overview-example TextAppearances
 *
 * @overview-example TextCategories
 *
 * @overview-example TextStatuses
 *
 * @example TextInlineStyling
 */
class TextComponent extends react_1.default.Component {
    render() {
        const { themedStyle, style, ...derivedProps } = this.props;
        return (react_1.default.createElement(react_native_1.Text, Object.assign({}, derivedProps, { style: [themedStyle, style] })));
    }
}
exports.TextComponent = TextComponent;
TextComponent.styledComponentName = 'Text';
exports.Text = theme_1.styled(TextComponent);
//# sourceMappingURL=text.component.js.map