"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * `TopNavigation` component is designed to be a Navigation Bar.
 * Can be used for navigation.
 *
 * @extends React.Component
 *
 * @property {string} title - Determines the title of the component.
 *
 * @property {string} subtitle - Determines the subtitle of the component.
 *
 * @property {string} alignment - Determines the alignment of the component.
 * Can be `center` or `start`.
 * Default is `start`.
 *
 * @property {ReactElement<TopNavigationActionProps>} leftControl - Determines the left control of the component.
 *
 * @property {ReactElement<TopNavigationActionProps>[]} rightControls - Determines the right controls of the component.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes text style of title.
 *
 * @property {StyleProp<TextStyle>} subtitleStyle - Customizes text style of subtitle.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example TopNavigationSimpleUsage
 *
 * @overview-example TopNavigationActions
 *
 * @overview-example TopNavigationAlignments
 *
 * @overview-example TopNavigationWithMenu
 *
 * @example TopNavigationInlineStyling
 */
class TopNavigationComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.getAlignmentDependentStyles = (alignment) => {
            if (alignment === 'center') {
                return {
                    container: styles.containerCentered,
                    titleContainer: styles.titleContainerCentered,
                };
            }
            return {
                rightControlsContainer: styles.rightControlsContainerStart,
            };
        };
        this.getComponentStyle = (source) => {
            const { titleTextAlign, titleFontFamily, titleFontSize, titleLineHeight, titleFontWeight, titleColor, subtitleTextAlign, subtitleFontFamily, subtitleFontSize, subtitleLineHeight, subtitleFontWeight, subtitleColor, ...containerParameters } = source;
            return {
                container: containerParameters,
                titleContainer: {},
                title: {
                    textAlign: titleTextAlign,
                    fontFamily: titleFontFamily,
                    fontSize: titleFontSize,
                    lineHeight: titleLineHeight,
                    fontWeight: titleFontWeight,
                    color: titleColor,
                },
                subtitle: {
                    textAlign: subtitleTextAlign,
                    fontFamily: subtitleFontFamily,
                    fontSize: subtitleFontSize,
                    color: subtitleColor,
                    fontWeight: subtitleFontWeight,
                    lineHeight: subtitleLineHeight,
                },
                leftControlContainer: {},
                rightControlsContainer: {},
            };
        };
        this.renderTextElement = (text, style) => {
            return (react_1.default.createElement(text_component_1.Text, { style: style }, text));
        };
        this.renderComponentChildren = (style) => {
            const { title, subtitle, leftControl, rightControls, titleStyle, subtitleStyle, } = this.props;
            return [
                services_1.isValidString(title) && this.renderTextElement(title, [style.title, styles.title, titleStyle]),
                services_1.isValidString(subtitle) && this.renderTextElement(subtitle, [style.subtitle, styles.subtitle, subtitleStyle]),
                leftControl && this.renderActionElements(leftControl),
                rightControls && this.renderActionElements(rightControls),
            ];
        };
    }
    renderActionElements(source) {
        return react_1.default.Children.map(source, (element, index) => {
            return react_1.default.cloneElement(element, {
                key: index,
                appearance: this.props.appearance,
            });
        });
    }
    render() {
        const { themedStyle, style, alignment, ...restProps } = this.props;
        const { container, leftControlContainer, titleContainer, rightControlsContainer, ...componentStyles } = this.getComponentStyle(themedStyle);
        const alignmentStyles = this.getAlignmentDependentStyles(alignment);
        const [titleElement, subtitleElement, leftControlElement, rightControlElements,] = this.renderComponentChildren(componentStyles);
        return (react_1.default.createElement(react_native_1.View, Object.assign({ style: [container, styles.container, alignmentStyles.container, style] }, restProps),
            react_1.default.createElement(react_native_1.View, { style: [leftControlContainer, styles.leftControlContainer] }, leftControlElement),
            react_1.default.createElement(react_native_1.View, { style: [titleContainer, styles.titleContainer, alignmentStyles.titleContainer] },
                titleElement,
                subtitleElement),
            react_1.default.createElement(react_native_1.View, { style: [rightControlsContainer, styles.rightControlsContainer, alignmentStyles.rightControlsContainer] }, rightControlElements)));
    }
}
exports.TopNavigationComponent = TopNavigationComponent;
TopNavigationComponent.styledComponentName = 'TopNavigation';
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    containerCentered: {
        justifyContent: 'space-between',
    },
    titleContainer: {},
    titleContainerCentered: {
        ...react_native_1.StyleSheet.absoluteFillObject,
        justifyContent: 'center',
        alignItems: 'center',
    },
    title: {},
    subtitle: {},
    leftControlContainer: {
        flexDirection: 'row',
        zIndex: 1,
    },
    rightControlsContainer: {
        flexDirection: 'row',
        zIndex: 1,
    },
    rightControlsContainerStart: {
        flex: 1,
        justifyContent: 'flex-end',
    },
});
exports.TopNavigation = theme_1.styled(TopNavigationComponent);
//# sourceMappingURL=topNavigation.component.js.map