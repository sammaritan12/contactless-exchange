/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ListRenderItemInfo } from 'react-native';
import { InputProps } from '../input/input.component';
import { PopoverElement } from '../popover/popover.component';
import { PopoverPlacement } from '../popover/type';
export interface AutocompleteOption {
    title: string;
}
export interface AutocompleteProps<O extends Option = Option> extends InputProps {
    data?: O[];
    placeholderData?: O[];
    onSelect?: (option: O) => void;
    renderItem?: (info: ListRenderItemInfo<O>) => React.ReactElement;
    placement?: PopoverPlacement | string;
}
export declare type AutocompleteElement<O extends Option = Option> = React.ReactElement<AutocompleteProps<O>>;
declare type Option = AutocompleteOption;
interface State {
    optionsVisible: boolean;
}
/**
 * Autocomplete is a normal text input enhanced by a panel of suggested options.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets data list visible.
 *
 * @method {() => void} hide - Sets data list invisible.
 *
 * @method {() => void} focus - Focuses Autocomplete and sets data list visible.
 *
 * @method {() => void} blur - Removes focus from Autocomplete and sets data list invisible.
 * This is the opposite of `focus()`.
 *
 * @method {() => boolean} isFocused - Returns true if the Autocomplete is currently focused and visible.
 *
 * @method {() => void} clear - Removes all text from the Autocomplete.
 *
 * @property {AutocompleteOption[]} data - Options displayed in component.
 * Each option can be any type, but should contain `title` property.
 *
 * @property {AutocompleteOption[]} placeholderData - Options displayed in component
 * when data is nullable of empty.
 *
 * @property {(option: AutocompleteOption) => void} onSelect - Emits when option is pressed.
 *
 * @property {(info: ListRenderItemInfo<AutocompleteOption>) => ReactElement} renderItem - Takes an
 * item from data and renders it into the list. If not provided, ListItem is rendered.
 *
 * @property {string | PopoverPlacement} placement - Determines the actual placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {InputProps} ...InputProps - Any props applied to Input component.
 *
 * @overview-example AutocompleteSimpleUsage
 *
 * @overview-example AutocompleteStates
 *
 * @overview-example AutocompleteStatus
 *
 * @overview-example AutocompleteSize
 *
 * @overview-example AutocompleteWithIcon
 *
 * @overview-example AutocompleteWithLabel
 *
 * @example AutocompleteHandleKeyboard
 *
 * @example AutocompleteAsync
 */
export declare class Autocomplete<O extends Option = Option> extends React.Component<AutocompleteProps<O>, State> {
    state: State;
    private popoverRef;
    private inputRef;
    private get data();
    show: () => void;
    hide: () => void;
    focus: () => void;
    blur: () => void;
    isFocused: () => boolean;
    clear: () => void;
    private onInputFocus;
    private onBackdropPress;
    private onOptionPress;
    private renderOptionElement;
    private renderCustomOptionElement;
    private renderOptionListElement;
    private renderInputElement;
    private renderComponentChildren;
    render(): PopoverElement;
}
export {};
