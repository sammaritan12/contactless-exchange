"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const text_component_1 = require("../text/text.component");
const services_1 = require("../support/services");
/**
 * `BottomNavigationTab` component is a part of the `BottomNavigation` component.
 * `BottomNavigation` tabs should be wrapped in BottomNavigation to provide usable component.
 * See usage examples at `BottomNavigation` component documentation.
 *
 * @extends React.Component
 *
 * @property {boolean} selected - Determines whether component is selected.
 *
 * @property {string} title - Determines the title of the tab.
 *
 * @property {StyleProp<TextStyle>} titleStyle - Customizes title style.
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines the icon of the tab.
 *
 * @property {(selected: boolean) => void} onSelect - Triggered on select value.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example BottomNavigationTabSimpleUsage
 *
 * @overview-example BottomNavigationTabWithIcon
 *
 * @example BottomNavigationTabInlineStyling
 */
class BottomNavigationTabComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = services_1.WebEventResponder.create(this);
        // WebEventResponderCallbacks
        this.onMouseEnter = () => {
            this.props.dispatch([theme_1.Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onPress = () => {
            if (this.props.onSelect) {
                this.props.onSelect(!this.props.selected);
            }
        };
        this.getComponentStyle = (source) => {
            const { iconWidth, iconHeight, iconMarginVertical, iconTintColor, textMarginVertical, textFontFamily, textFontSize, textLineHeight, textFontWeight, textColor, ...containerParameters } = source;
            return {
                container: containerParameters,
                text: {
                    marginVertical: textMarginVertical,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    color: textColor,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginVertical: iconMarginVertical,
                    tintColor: iconTintColor,
                },
            };
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return react_1.default.cloneElement(iconElement, {
                key: 1,
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderTitleElement = (style) => {
            const { title, titleStyle } = this.props;
            return (react_1.default.createElement(text_component_1.Text, { key: 2, style: [style, styles.text, titleStyle] }, title));
        };
        this.renderComponentChildren = (style) => {
            const { icon, title } = this.props;
            return [
                icon && this.renderIconElement(style.icon),
                services_1.isValidString(title) && this.renderTitleElement(style.text),
            ];
        };
    }
    render() {
        const { style, themedStyle, ...restProps } = this.props;
        const { container, ...componentStyles } = this.getComponentStyle(themedStyle);
        const [iconElement, titleElement] = this.renderComponentChildren(componentStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, restProps, this.webEventResponder.eventHandlers, { style: [container, styles.container, webStyles.container, style], onPress: this.onPress }),
            iconElement,
            titleElement));
    }
}
exports.BottomNavigationTabComponent = BottomNavigationTabComponent;
BottomNavigationTabComponent.styledComponentName = 'BottomNavigationTab';
const styles = react_native_1.StyleSheet.create({
    container: {
        justifyContent: 'center',
        alignItems: 'center',
    },
    text: {},
    icon: {},
});
const webStyles = react_native_1.Platform.OS === 'web' && react_native_1.StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
exports.BottomNavigationTab = theme_1.styled(BottomNavigationTabComponent);
//# sourceMappingURL=bottomNavigationTab.component.js.map