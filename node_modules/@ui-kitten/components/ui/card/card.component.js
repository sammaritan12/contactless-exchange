"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const divider_component_1 = require("../divider/divider.component");
const services_1 = require("../support/services");
/**
 * Styled `Card` component is a basic content container component.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `filled` or `outline`.
 * Default is `outline`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {ReactNode} children - Determines text of the component.
 *
 * @property {() => ReactElement | ReactElement<CardHeaderProps>} header - Determines header of the component.
 *
 * @property {() => ReactElement} footer - Determines footer of the component.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example CardSimpleUsage
 *
 * @overview-example CardWithHeaderAndFooter
 *
 * @overview-example CardCustomHeader
 *
 * @overview-example CardStatuses
 */
class CardComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.onPressIn = (event) => {
            this.props.dispatch([theme_1.Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.getComponentStyle = (source) => {
            const { backgroundColor, borderRadius, borderWidth, borderColor, } = source;
            const headerStyles = services_1.allWithPrefix(source, 'header');
            const bodyStyles = services_1.allWithPrefix(source, 'body');
            const footerStyles = services_1.allWithPrefix(source, 'footer');
            const accentStyles = services_1.allWithPrefix(source, 'accent');
            const titleStyles = services_1.allWithPrefix(source, 'title');
            const descriptionStyles = services_1.allWithPrefix(source, 'description');
            return {
                container: {
                    backgroundColor: backgroundColor,
                    borderRadius: borderRadius,
                    borderWidth: borderWidth,
                    borderColor: borderColor,
                },
                header: {
                    paddingVertical: headerStyles.headerPaddingVertical,
                    paddingHorizontal: headerStyles.headerPaddingHorizontal,
                },
                body: {
                    paddingVertical: bodyStyles.bodyPaddingVertical,
                    paddingHorizontal: bodyStyles.bodyPaddingHorizontal,
                },
                footer: {
                    paddingVertical: footerStyles.footerPaddingVertical,
                    paddingHorizontal: footerStyles.footerPaddingHorizontal,
                },
                title: {
                    fontFamily: titleStyles.titleFontFamily,
                    fontSize: titleStyles.titleFontSize,
                    fontWeight: titleStyles.titleFontWeight,
                    lineHeight: titleStyles.titleLineHeight,
                    color: titleStyles.titleColor,
                    marginHorizontal: titleStyles.titleMarginHorizontal,
                },
                description: {
                    fontFamily: descriptionStyles.titleFontFamily,
                    fontSize: descriptionStyles.titleFontSize,
                    fontWeight: descriptionStyles.titleFontWeight,
                    lineHeight: descriptionStyles.titleLineHeight,
                    color: descriptionStyles.descriptionColor,
                    marginHorizontal: descriptionStyles.descriptionMarginHorizontal,
                },
                accent: {
                    backgroundColor: accentStyles.accentBackgroundColor,
                    height: accentStyles.accentHeight,
                },
            };
        };
        this.renderDivider = () => {
            return (react_1.default.createElement(divider_component_1.Divider, null));
        };
        this.renderHeader = (headerStyles) => {
            const header = this.props.header();
            return react_1.default.cloneElement(header, {
                headerStyle: [styles.header, headerStyles.style, header.props.style],
                accentStyle: headerStyles.accent,
                titleStyle: headerStyles.title,
                descriptionStyle: headerStyles.description,
            });
        };
        this.renderFooter = (style) => {
            const footer = this.props.footer();
            return react_1.default.cloneElement(footer, {
                style: [style, styles.footer, footer.props.style],
            });
        };
        this.renderBody = (style) => {
            return (react_1.default.createElement(react_native_1.View, { style: [styles.body, style] }, this.props.children));
        };
        this.renderComponentChildren = (style) => {
            const { header, footer } = this.props;
            const headerStyles = {
                style: style.header,
                accent: style.accent,
                title: style.title,
                description: style.description,
            };
            return [
                header && this.renderHeader(headerStyles),
                this.renderBody(style.body),
                footer && this.renderFooter(style.footer),
            ];
        };
    }
    render() {
        const { themedStyle, style, children, ...restProps } = this.props;
        const { container, ...childrenStyles } = this.getComponentStyle(themedStyle);
        const [header, body, footer] = this.renderComponentChildren(childrenStyles);
        return (react_1.default.createElement(react_native_1.TouchableOpacity, Object.assign({ activeOpacity: 1.0 }, restProps, { style: [container, styles.container, style], onPressIn: this.onPressIn, onPressOut: this.onPressOut }),
            header,
            header && this.renderDivider(),
            body,
            footer && this.renderDivider(),
            footer));
    }
}
CardComponent.styledComponentName = 'Card';
const styles = react_native_1.StyleSheet.create({
    container: {
        overflow: 'hidden',
        justifyContent: 'space-between',
    },
    header: {
        backgroundColor: 'transparent',
    },
    body: {
        backgroundColor: 'transparent',
    },
    footer: {
        backgroundColor: 'transparent',
    },
});
exports.Card = theme_1.styled(CardComponent);
//# sourceMappingURL=card.component.js.map