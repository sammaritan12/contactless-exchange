"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const popoverView_component_1 = require("./popoverView.component");
const placement_service_1 = require("./placement.service");
const type_1 = require("./type");
const measure_component_1 = require("../measure/measure.component");
const type_2 = require("../measure/type");
const POINT_OUTSCREEN = new type_2.Point(-999, -999);
/**
 * Displays content in a Modal positioned relative to child component.
 * Supports automatic positioning.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets `content` element visible.
 *
 * @method {() => void} hide - Sets `content` element invisible.
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {ReactElement} content - Determines the content of the popover.
 *
 * @property {ReactElement} children - Determines the element "above" which popover will be shown.
 *
 * @property {string | PopoverPlacement} placement - Determines the placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {boolean} fullWidth - Determines whether content element should have same width as child element.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example PopoverSimpleUsage
 *
 * @overview-example PopoverPlacement
 *
 * @overview-example PopoverStyledBackdrop
 */
class Popover extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.state = {
            childFrame: type_2.Frame.zero(),
            contentFrame: type_2.Frame.zero(),
            forceMeasure: false,
        };
        this.contentPosition = POINT_OUTSCREEN;
        this.placementService = new placement_service_1.PopoverPlacementService();
        this.actualPlacement = this.preferredPlacement;
        this.show = () => {
            this.modalId = theme_1.ModalService.show(this.renderMeasuringPopoverElement(), this.backdropConfig);
        };
        this.hide = () => {
            this.modalId = theme_1.ModalService.hide(this.modalId);
        };
        this.onChildMeasure = (childFrame) => {
            this.state.childFrame = childFrame;
            if (!this.modalId && this.props.visible) {
                this.show();
                return;
            }
            if (this.modalId && this.props.visible) {
                theme_1.ModalService.update(this.modalId, this.renderPopoverElement());
            }
        };
        this.onContentMeasure = (contentFrame) => {
            this.state.contentFrame = contentFrame;
            const placementOptions = this.findPlacementOptions(contentFrame, this.state.childFrame);
            this.actualPlacement = this.placementService.find(this.preferredPlacement, placementOptions);
            const displayFrame = this.actualPlacement.frame(placementOptions);
            this.contentPosition = displayFrame.origin;
            theme_1.ModalService.update(this.modalId, this.renderPopoverElement());
        };
        this.findPlacementOptions = (contentFrame, childFrame) => {
            const width = this.props.fullWidth ? childFrame.size.width : contentFrame.size.width;
            const frame = new type_2.Frame(contentFrame.origin.x, contentFrame.origin.y, width, contentFrame.size.height);
            return new type_1.PlacementOptions(frame, childFrame, type_2.Frame.window(), type_2.Frame.zero());
        };
        this.renderContentElement = () => {
            const contentElement = this.props.content;
            const fullWidthStyle = { width: this.state.childFrame.size.width };
            return react_1.default.cloneElement(contentElement, {
                style: [this.props.fullWidth && fullWidthStyle, contentElement.props.style],
            });
        };
        this.renderPopoverElement = () => {
            return (react_1.default.createElement(popoverView_component_1.PopoverView, Object.assign({}, this.props, { contentContainerStyle: [this.props.contentContainerStyle, styles.popoverView, this.contentFlexPosition], placement: this.actualPlacement.reverse() }), this.renderContentElement()));
        };
        this.renderMeasuringPopoverElement = () => {
            return (react_1.default.createElement(measure_component_1.MeasureElement, { onMeasure: this.onContentMeasure }, this.renderPopoverElement()));
        };
    }
    get preferredPlacement() {
        return type_1.PopoverPlacements.parse(this.props.placement);
    }
    get contentFlexPosition() {
        const { x: left, y: top } = this.contentPosition;
        return { left, top };
    }
    get backdropConfig() {
        const { onBackdropPress, backdropStyle } = this.props;
        return { onBackdropPress, backdropStyle };
    }
    componentDidUpdate(prevProps) {
        if (!this.modalId && this.props.visible && !this.state.forceMeasure) {
            this.setState({ forceMeasure: true });
            return;
        }
        if (this.modalId && !this.props.visible) {
            this.contentPosition = POINT_OUTSCREEN;
            this.hide();
        }
    }
    componentWillUnmount() {
        this.hide();
    }
    render() {
        return (react_1.default.createElement(measure_component_1.MeasureElement, { force: this.state.forceMeasure, onMeasure: this.onChildMeasure }, this.props.children));
    }
}
exports.Popover = Popover;
Popover.defaultProps = {
    placement: type_1.PopoverPlacements.BOTTOM,
};
const styles = react_native_1.StyleSheet.create({
    popoverView: {
        position: 'absolute',
    },
});
//# sourceMappingURL=popover.component.js.map