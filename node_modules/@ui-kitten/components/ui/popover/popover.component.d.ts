/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { PopoverViewProps } from './popoverView.component';
import { ModalProps } from '../modal/modal.component';
import { Frame } from '../measure/type';
export interface PopoverProps extends PopoverViewProps, ModalProps {
    content: React.ReactElement;
    children: React.ReactElement;
    fullWidth?: boolean;
}
export declare type PopoverElement = React.ReactElement<PopoverProps>;
interface State {
    childFrame: Frame;
    contentFrame: Frame;
    forceMeasure: boolean;
}
/**
 * Displays content in a Modal positioned relative to child component.
 * Supports automatic positioning.
 *
 * @extends React.Component
 *
 * @method {() => void} show - Sets `content` element visible.
 *
 * @method {() => void} hide - Sets `content` element invisible.
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {ReactElement} content - Determines the content of the popover.
 *
 * @property {ReactElement} children - Determines the element "above" which popover will be shown.
 *
 * @property {string | PopoverPlacement} placement - Determines the placement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {boolean} fullWidth - Determines whether content element should have same width as child element.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example PopoverSimpleUsage
 *
 * @overview-example PopoverPlacement
 *
 * @overview-example PopoverStyledBackdrop
 */
export declare class Popover extends React.Component<PopoverProps, State> {
    static defaultProps: Partial<PopoverProps>;
    state: State;
    private modalId;
    private contentPosition;
    private placementService;
    private actualPlacement;
    private get preferredPlacement();
    private get contentFlexPosition();
    private get backdropConfig();
    show: () => void;
    hide: () => void;
    componentDidUpdate(prevProps: PopoverProps): void;
    componentWillUnmount(): void;
    private onChildMeasure;
    private onContentMeasure;
    private findPlacementOptions;
    private renderContentElement;
    private renderPopoverElement;
    private renderMeasuringPopoverElement;
    render(): React.ReactElement;
}
export {};
