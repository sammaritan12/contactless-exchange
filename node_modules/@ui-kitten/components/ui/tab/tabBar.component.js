"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const theme_1 = require("../../theme");
const tabIndicator_component_1 = require("../support/components/tabIndicator.component");
/**
 * The `TabBar` component that manages `Tab` components.
 *
 * @extends React.Component
 *
 * @property {number} selectedIndex - Determines current tab index.
 *
 * @property {StyleProp<ViewStyle>} indicatorStyle - Determines style of selected tab indicator.
 *
 * @property {(index: number) => void} onSelect - Fires on tab select with corresponding index.
 *
 * @property {ReactElement<TabProps> | ReactElement<TabProps>[]} children - Determines tabs.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example TabBarSimpleUsage
 *
 * @overview-example TabBarWithIcon
 *
 * @overview-example Using with React Navigation
 *
 * ```
 * import React from 'react';
 * import { SafeAreaView } from 'react-native';
 * import { NavigationContainer } from '@react-navigation/native';
 * import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
 * import { TabBar, Tab, Layout, Text } from '../..';
 *
 * // React Navigation Top Tabs also requires installation of `react-native-tab-view`
 * // npm i react-native-tab-view
 *
 * const TopTab = createBottomTabNavigator();
 *
 * const UsersScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>USERS</Text>
 *   </Layout>
 * );
 *
 * const OrdersScreen = () => (
 *   <Layout style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
 *     <Text category='h1'>ORDERS</Text>
 *   </Layout>
 * );
 *
 * const TopTabBar = ({ navigation, state }) => {
 *
 *   const onSelect = (index) => {
 *     navigation.navigate(state.routeNames[index]);
 *   };
 *
 *   return (
 *     <SafeAreaView>
 *       <TabBar selectedIndex={state.index} onSelect={onSelect}>
 *         <Tab title='USERS'/>
 *         <Tab title='ORDERS'/>
 *       </BottomNavigation>
 *     </SafeAreaView>
 *   );
 * };
 *
 * const TabNavigator = () => (
 *   <TopTab.Navigator tabBar={props => <TopTabBar {...props} />}>
 *     <TopTab.Screen name='Users' component={UsersScreen}/>
 *     <TopTab.Screen name='Orders' component={OrdersScreen}/>
 *   </TopTab.Navigator>
 * );
 *
 * export const AppNavigator = () => (
 *   <NavigationContainer>
 *     <TabNavigator/>
 *   </NavigationContainer>
 * );
 * ```
 */
class TabBarComponent extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.tabIndicatorRef = react_1.default.createRef();
        this.onTabSelect = (index) => {
            if (this.props.onSelect) {
                this.props.onSelect(index);
            }
        };
        this.getComponentStyle = (source) => {
            const { indicatorHeight, indicatorBorderRadius, indicatorBackgroundColor, ...containerParameters } = source;
            return {
                container: containerParameters,
                item: {},
                indicator: {
                    height: indicatorHeight,
                    borderRadius: indicatorBorderRadius,
                    backgroundColor: indicatorBackgroundColor,
                },
            };
        };
        this.isTabSelected = (index) => {
            return index === this.props.selectedIndex;
        };
        this.renderTabElement = (element, index) => {
            return react_1.default.cloneElement(element, {
                key: index,
                style: [styles.item, element.props.style],
                selected: this.isTabSelected(index),
                onSelect: () => this.onTabSelect(index),
            });
        };
        this.renderTabElements = (source) => {
            return react_1.default.Children.map(source, this.renderTabElement);
        };
    }
    scrollToIndex(params) {
        const { current: tabIndicator } = this.tabIndicatorRef;
        tabIndicator.scrollToIndex(params);
    }
    scrollToOffset(params) {
        const { current: tabIndicator } = this.tabIndicatorRef;
        tabIndicator.scrollToOffset(params);
    }
    render() {
        const { themedStyle, style, indicatorStyle, selectedIndex, children, ...derivedProps } = this.props;
        const componentStyle = this.getComponentStyle(themedStyle);
        const tabElements = this.renderTabElements(children);
        return (react_1.default.createElement(react_native_1.View, null,
            react_1.default.createElement(react_native_1.View, Object.assign({}, derivedProps, { style: [componentStyle.container, styles.container, style] }), tabElements),
            react_1.default.createElement(tabIndicator_component_1.TabIndicator, { ref: this.tabIndicatorRef, style: [componentStyle.indicator, styles.indicator, indicatorStyle], selectedPosition: selectedIndex, positions: tabElements.length })));
    }
}
exports.TabBarComponent = TabBarComponent;
TabBarComponent.styledComponentName = 'TabBar';
TabBarComponent.defaultProps = {
    selectedIndex: 0,
};
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: 'row',
    },
    item: {
        flex: 1,
    },
    indicator: {},
});
exports.TabBar = theme_1.styled(TabBarComponent);
//# sourceMappingURL=tabBar.component.js.map