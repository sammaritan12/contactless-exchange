/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { ThemeType } from './theme.service';
import { Styles } from '../style/style.service';
export interface ThemedComponentProps<T extends Styles<T> = any> {
    theme?: ThemeType;
    themedStyle?: T | undefined;
}
export declare type ThemedComponentClass<P, S extends Styles<S>> = React.ComponentClass<ThemedComponentProps<S> & P>;
declare type CreateStylesFunction<T extends Styles<T>> = (theme: ThemeType) => T;
/**
 * `withStyles` is a High Order Function which is used to create themed style for non-styled component.
 * Basically used when need to use theme variable somewhere.
 * Returns component class which can be used as themed component.
 *
 * @property {ThemeType} theme - Determines theme used to style component.
 *
 * @property {Styles} themedStyle - Determines component style for it's current state.
 *
 * @param Component - Type: {ComponentType}. Determines class of component to be themed.
 *
 * @param createStyles - Type: {(theme: ThemeType) => Styles}. Determines arrow function used to create styles.
 *
 * @overview-example WithStylesSimpleUsage
 */
export declare const withStyles: <P extends object, S>(Component: React.ComponentType<P>, createStyles?: CreateStylesFunction<S>) => ThemedComponentClass<P, S>;
export {};
