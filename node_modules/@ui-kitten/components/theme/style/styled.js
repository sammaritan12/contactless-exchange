"use strict";
/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const hoist_non_react_statics_1 = __importDefault(require("hoist-non-react-statics"));
const styleConsumer_service_1 = require("./styleConsumer.service");
const mappingContext_1 = require("../mapping/mappingContext");
const themeContext_1 = require("../theme/themeContext");
/**
 * `styled` is a High Order Function which is used to apply style mapping on component.
 *
 * Requires component to have `styledComponentName` string property which defines
 * corresponding component name in mapping. (e.g 'Button' for Button component).
 * Returns component class which can be used as styled component.
 *
 * @property {string} appearance - Determines style appearance of component. Default is provided by mapping.
 *
 * @property {ThemeType} theme - Determines theme used to style component.
 *
 * @property {StyleType} themedStyle - Determines component style for it's current state.
 *
 * @property {(interaction: Interaction[]) => void} dispatch - Determines function
 * for dispatching current state of component. This is designed to be used as style request function.
 * Calls component re-render if style for requested state differ from current.
 *
 * @param Component - Type: {ComponentType}. Determines class or functional component to be styled.
 *
 * @overview-example StyledComponentSimpleUsage
 *
 * @overview-example StyledComponentStates
 *
 * @overview-example StyledComponentVariants
 */
exports.styled = (Component) => {
    // @ts-ignore
    if (!Component.styledComponentName) {
        console.warn('Styled components should specify corresponding style name.');
        return null;
    }
    class Wrapper extends react_1.default.Component {
        constructor() {
            super(...arguments);
            this.state = {
                interaction: [],
            };
            this.init = false;
            this.onInit = (style, theme) => {
                // @ts-ignore
                this.service = new styleConsumer_service_1.StyleConsumerService(Component.styledComponentName, style, theme);
                this.defaultProps = this.service.createDefaultProps();
                this.init = true;
            };
            this.onDispatch = (interaction) => {
                this.setState({ interaction });
            };
            this.withStyledProps = (source, style, theme) => {
                const { interaction } = this.state;
                const props = { ...this.defaultProps, ...source };
                return this.service.withStyledProps(props, style, theme, interaction);
            };
            this.renderWrappedElement = (style, theme) => {
                if (!this.init) {
                    this.onInit(style, theme);
                }
                const { forwardedRef, ...restProps } = this.props;
                const props = this.withStyledProps(restProps, style, theme);
                return (react_1.default.createElement(Component, Object.assign({}, props, { ref: forwardedRef, dispatch: this.onDispatch })));
            };
        }
        render() {
            return (react_1.default.createElement(mappingContext_1.MappingContext.Consumer, null, (style) => (react_1.default.createElement(themeContext_1.ThemeContext.Consumer, null, (theme) => {
                return this.renderWrappedElement(style, theme);
            }))));
        }
    }
    const WrappingElement = (props, ref) => {
        return (
        // @ts-ignore
        react_1.default.createElement(Wrapper, Object.assign({}, props, { forwardedRef: ref })));
    };
    const ResultComponent = react_1.default.forwardRef(WrappingElement);
    ResultComponent.displayName = Component.displayName || Component.name;
    // @ts-ignore
    hoist_non_react_statics_1.default(ResultComponent, Component);
    // @ts-ignore
    return ResultComponent;
};
//# sourceMappingURL=styled.js.map